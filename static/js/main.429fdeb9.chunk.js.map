{"version":3,"sources":["types.ts","components/Carousel.tsx","App.tsx","index.tsx"],"names":["InputId","Carousel","images","step","frameSize","itemWidth","animationDuration","infinite","useState","currentImgPosition","setCurrentImgPosition","finalImgPosition","length","isDisabledPrev","isDisabledNext","className","style","width","transition","map","image","index","transform","src","alt","type","onClick","prev","disabled","App","settings","setSettings","handleInput","event","target","id","prevSettings","value","htmlFor","min","max","onChange","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.429fdeb9.chunk.js","sourcesContent":["export interface State {\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean;\n}\n\nexport enum InputId {\n  itemId = 'itemWidth',\n  frameId = 'frameSize',\n  stepId = 'step',\n  animationDurationId = 'animationDuration',\n  infiniteId = 'infinite',\n}\n","import React, { useState } from 'react';\nimport './Carousel.scss';\n\ntype Props = {\n  images: string[],\n  step: number,\n  frameSize: number,\n  itemWidth: number,\n  animationDuration: number,\n  infinite: boolean,\n};\n\nconst Carousel: React.FC<Props> = ({\n  images,\n  step,\n  frameSize,\n  itemWidth,\n  animationDuration,\n  infinite,\n}) => {\n  const [currentImgPosition, setCurrentImgPosition] = useState(0);\n  const finalImgPosition = images.length - frameSize;\n  const isDisabledPrev = currentImgPosition === 0 && !infinite;\n  const isDisabledNext = currentImgPosition === finalImgPosition && !infinite;\n\n  function handlePrevImage() {\n    if (currentImgPosition > 0) {\n      setCurrentImgPosition(prev => (\n        prev - step >= 0\n          ? prev - step\n          : 0\n      ));\n    } else {\n      setCurrentImgPosition(finalImgPosition);\n    }\n  }\n\n  function handleNextImage() {\n    if (currentImgPosition < finalImgPosition) {\n      setCurrentImgPosition(prev => (\n        prev + step <= finalImgPosition\n          ? prev + step\n          : finalImgPosition\n      ));\n    } else {\n      setCurrentImgPosition(0);\n    }\n  }\n\n  return (\n    <div\n      className=\"Carousel\"\n      style={{\n        width: `${frameSize * itemWidth}px`,\n        transition: `${animationDuration}ms`,\n      }}\n    >\n      <ul className=\"Carousel__list\">\n        {images.map((image, index) => (\n          <li\n            key={image}\n            style={{\n              transform: `translateX(${-(currentImgPosition * itemWidth)}px)`,\n              transition: `transform ${animationDuration}ms ease`,\n            }}\n          >\n            <img\n              className=\"Carousel__image\"\n              src={image}\n              alt={`${index + 1}`}\n              width={itemWidth}\n            />\n          </li>\n        ))}\n      </ul>\n\n      <div className=\"Carousel__controls\">\n        <button\n          type=\"button\"\n          className={\n            isDisabledPrev\n              ? 'Carousel__button Carousel__button--disable'\n              : 'Carousel__button Carousel__button--active'\n          }\n          onClick={handlePrevImage}\n          disabled={isDisabledPrev}\n        >\n          Prev\n        </button>\n\n        <button\n          data-cy=\"next\"\n          type=\"button\"\n          className={\n            isDisabledNext\n              ? 'Carousel__button Carousel__button--disable'\n              : 'Carousel__button Carousel__button--active'\n          }\n          onClick={handleNextImage}\n          disabled={isDisabledNext}\n        >\n          Next\n        </button>\n      </div>\n\n    </div>\n  );\n};\n\nexport default Carousel;\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { InputId, State } from './types';\nimport Carousel from './components/Carousel';\n\nconst images = [\n  './img/1.png',\n  './img/2.png',\n  './img/3.png',\n  './img/4.png',\n  './img/5.png',\n  './img/6.png',\n  './img/7.png',\n  './img/8.png',\n  './img/9.png',\n  './img/10.png',\n];\n\nexport const App: React.FC = () => {\n  const [settings, setSettings] = useState<State>({\n    step: 3,\n    frameSize: 3,\n    itemWidth: 130,\n    animationDuration: 1000,\n    infinite: false,\n  });\n\n  type InputEvent = React.ChangeEvent<HTMLInputElement>\n  & { target: { id: keyof typeof InputId } };\n\n  function handleInput(event: InputEvent) {\n    if (event.target.id === 'infiniteId') {\n      setSettings(prevSettings => ({\n        ...prevSettings,\n        [InputId[event.target.id]]: !prevSettings.infinite,\n      }));\n\n      return;\n    }\n\n    setSettings(prevSettings => ({\n      ...prevSettings,\n      [InputId[event.target.id]]: +event.target.value,\n    }));\n  }\n\n  return (\n    <div className=\"App\">\n      <h1 data-cy=\"title\">\n        {`Carousel with ${images.length} images`}\n      </h1>\n\n      <div className=\"App__container\">\n        <label className=\"App__label\" htmlFor=\"itemId\">\n          Item Width:\n          <input\n            className=\"App__input\"\n            type=\"number\"\n            id=\"itemId\"\n            min={50}\n            max={390}\n            step={5}\n            value={settings.itemWidth}\n            onChange={handleInput}\n          />\n        </label>\n\n        <label className=\"App__label\" htmlFor=\"frameId\">\n          Frame Size:\n          <input\n            className=\"App__input\"\n            type=\"number\"\n            id=\"frameId\"\n            min={1}\n            max={images.length}\n            value={settings.frameSize}\n            onChange={handleInput}\n          />\n        </label>\n\n        <label className=\"App__label\" htmlFor=\"stepId\">\n          Step:\n          <input\n            className=\"App__input\"\n            type=\"number\"\n            id=\"stepId\"\n            min={1}\n            max={images.length}\n            value={settings.step}\n            onChange={handleInput}\n          />\n        </label>\n\n        <label className=\"App__label\" htmlFor=\"animationDurationId\">\n          Animation Duration:\n          <input\n            className=\"App__input\"\n            type=\"number\"\n            id=\"animationDurationId\"\n            min={50}\n            step={50}\n            value={settings.animationDuration}\n            onChange={handleInput}\n          />\n        </label>\n\n        <label className=\"App__label\" htmlFor=\"infiniteId\">\n          Infinite:\n          <input\n            className=\"App__switch\"\n            type=\"checkbox\"\n            id=\"infiniteId\"\n            onChange={handleInput}\n          />\n        </label>\n      </div>\n\n      <Carousel\n        images={images}\n        step={settings.step}\n        frameSize={settings.frameSize}\n        itemWidth={settings.itemWidth}\n        animationDuration={settings.animationDuration}\n        infinite={settings.infinite}\n      />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}